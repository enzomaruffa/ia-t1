Finished setup of the map. Current state: 
Map with 0 moves and 0 segments

Checking i, j (0, 0)
Created a new segment at 0x7fb31dc05a90 in: 
Segment 0 with size 0, 0 frontiers and color 1
    Added 0, 0 to the queue
    Checking 0, 0 from the queue
        Created a frontier node at:
Node in (0, 0), with 0 directions that belongs to segment with ID 0 and color 1
        Analyzing neighbours...
            Checking neighbour in 0, -1 against 3, 3
            Checking neighbour in -1, 0 against 3, 3
            Checking neighbour in 1, 0 against 3, 3
                Neighbour has color 2
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
            Checking neighbour in 0, 1 against 3, 3
                Neighbour has color 1
                Neighbour belongs to the same color! Pushing to the queue...
        After analysis: 
Node in (0, 0), with 1 directions that belongs to segment with ID 0 and color 1
        Node has 1 directions, so reallocating it
    Checking 0, 1 from the queue
        Created a frontier node at:
Node in (0, 1), with 0 directions that belongs to segment with ID 0 and color 1
        Analyzing neighbours...
            Checking neighbour in 0, 0 against 3, 3
                Neighbour has color 1
                Neighbour belongs to the same color! Pushing to the queue...
            Checking neighbour in -1, 1 against 3, 3
            Checking neighbour in 1, 1 against 3, 3
                Neighbour has color 3
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
            Checking neighbour in 0, 2 against 3, 3
                Neighbour has color 3
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
        After analysis: 
Node in (0, 1), with 2 directions that belongs to segment with ID 0 and color 1
        Node has 2 directions, so reallocating it
    Checking 0, 0 from the queue
        Had previously checked... Returning
Finished expanding. Segment now: 
Segment 0 with size 2, 2 frontiers and color 1
Node in (0, 0), with 1 directions that belongs to segment with ID 0 and color 1
Node is at 0x7fb31dc05b90
Direction pointing to 0x0
Node in (0, 1), with 2 directions that belongs to segment with ID 0 and color 1
Node is at 0x7fb31dc05bd0
Direction pointing to 0x0
Direction pointing to 0x0
Reallocated segment.
Node in (0, 0), with 1 directions that belongs to segment with ID 0 and color 1
Node is at 0x7fb31dc05b90
Direction pointing to 0x0
Node in (0, 1), with 2 directions that belongs to segment with ID 0 and color 1
Node is at 0x7fb31dc05bd0
Direction pointing to 0x0
Direction pointing to 0x0

Checking i, j (0, 1)

Checking i, j (0, 2)
Created a new segment at 0x7fb31dc05c60 in: 
Segment 1 with size 0, 0 frontiers and color 3
    Added 0, 2 to the queue
    Checking 0, 2 from the queue
        Created a frontier node at:
Node in (0, 2), with 0 directions that belongs to segment with ID 1 and color 3
        Analyzing neighbours...
            Checking neighbour in 0, 1 against 3, 3
                Neighbour has color 1
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (0, 1), with 2 directions that belongs to segment with ID 0 and color 1
                Looking for the frontier with direction 2, which is opposite to our 0 in the other node!
                For k 0, other_direction is 1
                For k 1, other_direction is 2
                Found frontier in the other. Backlink created!
            Checking neighbour in -1, 2 against 3, 3
            Checking neighbour in 1, 2 against 3, 3
                Neighbour has color 1
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
            Checking neighbour in 0, 3 against 3, 3
        After analysis: 
Node in (0, 2), with 2 directions that belongs to segment with ID 1 and color 3
        Node has 2 directions, so reallocating it
Finished expanding. Segment now: 
Segment 1 with size 1, 1 frontiers and color 3
Node in (0, 2), with 2 directions that belongs to segment with ID 1 and color 3
Node is at 0x7fb31dc05ae0
Direction pointing to 0x7fb31dc05bd0
Direction 0 pointing to node in (0, 1) which belongs to segment 0 and has color 1
Direction pointing to 0x0
Reallocated segment.
Node in (0, 2), with 2 directions that belongs to segment with ID 1 and color 3
Node is at 0x7fb31dc05ae0
Direction pointing to 0x7fb31dc05bd0
Direction 0 pointing to node in (0, 1) which belongs to segment 0 and has color 1
Direction pointing to 0x0

Checking i, j (1, 0)
Created a new segment at 0x7fb31dc05b30 in: 
Segment 2 with size 0, 0 frontiers and color 2
    Added 1, 0 to the queue
    Checking 1, 0 from the queue
        Created a frontier node at:
Node in (1, 0), with 0 directions that belongs to segment with ID 2 and color 2
        Analyzing neighbours...
            Checking neighbour in 1, -1 against 3, 3
            Checking neighbour in 0, 0 against 3, 3
                Neighbour has color 1
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (0, 0), with 1 directions that belongs to segment with ID 0 and color 1
                Looking for the frontier with direction 1, which is opposite to our 3 in the other node!
                For k 0, other_direction is 1
                Found frontier in the other. Backlink created!
            Checking neighbour in 2, 0 against 3, 3
                Neighbour has color 2
                Neighbour belongs to the same color! Pushing to the queue...
            Checking neighbour in 1, 1 against 3, 3
                Neighbour has color 3
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
        After analysis: 
Node in (1, 0), with 2 directions that belongs to segment with ID 2 and color 2
        Node has 2 directions, so reallocating it
    Checking 2, 0 from the queue
        Created a frontier node at:
Node in (2, 0), with 0 directions that belongs to segment with ID 2 and color 2
        Analyzing neighbours...
            Checking neighbour in 2, -1 against 3, 3
            Checking neighbour in 1, 0 against 3, 3
                Neighbour has color 2
                Neighbour belongs to the same color! Pushing to the queue...
            Checking neighbour in 3, 0 against 3, 3
            Checking neighbour in 2, 1 against 3, 3
                Neighbour has color 2
                Neighbour belongs to the same color! Pushing to the queue...
        After analysis: 
Node in (2, 0), with 0 directions that belongs to segment with ID 2 and color 2
        Node has 0 directions, so freeing it
    Checking 1, 0 from the queue
        Had previously checked... Returning
    Checking 2, 1 from the queue
        Created a frontier node at:
Node in (2, 1), with 0 directions that belongs to segment with ID 2 and color 2
        Analyzing neighbours...
            Checking neighbour in 2, 0 against 3, 3
                Neighbour has color 2
                Neighbour belongs to the same color! Pushing to the queue...
            Checking neighbour in 1, 1 against 3, 3
                Neighbour has color 3
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
            Checking neighbour in 3, 1 against 3, 3
            Checking neighbour in 2, 2 against 3, 3
                Neighbour has color 2
                Neighbour belongs to the same color! Pushing to the queue...
        After analysis: 
Node in (2, 1), with 1 directions that belongs to segment with ID 2 and color 2
        Node has 1 directions, so reallocating it
    Checking 2, 0 from the queue
        Had previously checked... Returning
    Checking 2, 2 from the queue
        Created a frontier node at:
Node in (2, 2), with 0 directions that belongs to segment with ID 2 and color 2
        Analyzing neighbours...
            Checking neighbour in 2, 1 against 3, 3
                Neighbour has color 2
                Neighbour belongs to the same color! Pushing to the queue...
            Checking neighbour in 1, 2 against 3, 3
                Neighbour has color 1
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
            Checking neighbour in 3, 2 against 3, 3
            Checking neighbour in 2, 3 against 3, 3
        After analysis: 
Node in (2, 2), with 1 directions that belongs to segment with ID 2 and color 2
        Node has 1 directions, so reallocating it
    Checking 2, 1 from the queue
        Had previously checked... Returning
Finished expanding. Segment now: 
Segment 2 with size 4, 3 frontiers and color 2
Node in (1, 0), with 2 directions that belongs to segment with ID 2 and color 2
Node is at 0x7fb31dc05cd0
Direction pointing to 0x7fb31dc05b90
Direction 3 pointing to node in (0, 0) which belongs to segment 0 and has color 1
Direction pointing to 0x0
Node in (2, 1), with 1 directions that belongs to segment with ID 2 and color 2
Node is at 0x7fb31dc05d20
Direction pointing to 0x0
Node in (2, 2), with 1 directions that belongs to segment with ID 2 and color 2
Node is at 0x7fb31dc05eb0
Direction pointing to 0x0
Reallocated segment.
Node in (1, 0), with 2 directions that belongs to segment with ID 2 and color 2
Node is at 0x7fb31dc05cd0
Direction pointing to 0x7fb31dc05b90
Direction 3 pointing to node in (0, 0) which belongs to segment 0 and has color 1
Direction pointing to 0x0
Node in (2, 1), with 1 directions that belongs to segment with ID 2 and color 2
Node is at 0x7fb31dc05d20
Direction pointing to 0x0
Node in (2, 2), with 1 directions that belongs to segment with ID 2 and color 2
Node is at 0x7fb31dc05eb0
Direction pointing to 0x0

Checking i, j (1, 1)
Created a new segment at 0x7fb31dc05f30 in: 
Segment 3 with size 0, 0 frontiers and color 3
    Added 1, 1 to the queue
    Checking 1, 1 from the queue
        Created a frontier node at:
Node in (1, 1), with 0 directions that belongs to segment with ID 3 and color 3
        Analyzing neighbours...
            Checking neighbour in 1, 0 against 3, 3
                Neighbour has color 2
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (1, 0), with 2 directions that belongs to segment with ID 2 and color 2
                Looking for the frontier with direction 2, which is opposite to our 0 in the other node!
                For k 0, other_direction is 3
                For k 1, other_direction is 2
                Found frontier in the other. Backlink created!
            Checking neighbour in 0, 1 against 3, 3
                Neighbour has color 1
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (0, 1), with 2 directions that belongs to segment with ID 0 and color 1
                Looking for the frontier with direction 1, which is opposite to our 3 in the other node!
                For k 0, other_direction is 1
                Found frontier in the other. Backlink created!
            Checking neighbour in 2, 1 against 3, 3
                Neighbour has color 2
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (2, 1), with 1 directions that belongs to segment with ID 2 and color 2
                Looking for the frontier with direction 3, which is opposite to our 1 in the other node!
                For k 0, other_direction is 3
                Found frontier in the other. Backlink created!
            Checking neighbour in 1, 2 against 3, 3
                Neighbour has color 1
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
        After analysis: 
Node in (1, 1), with 4 directions that belongs to segment with ID 3 and color 3
        Node has 4 directions, so reallocating it
Finished expanding. Segment now: 
Segment 3 with size 1, 1 frontiers and color 3
Node in (1, 1), with 4 directions that belongs to segment with ID 3 and color 3
Node is at 0x7fb31dc05f50
Direction pointing to 0x7fb31dc05cd0
Direction 0 pointing to node in (1, 0) which belongs to segment 2 and has color 2
Direction pointing to 0x7fb31dc05bd0
Direction 3 pointing to node in (0, 1) which belongs to segment 0 and has color 1
Direction pointing to 0x7fb31dc05d20
Direction 1 pointing to node in (2, 1) which belongs to segment 2 and has color 2
Direction pointing to 0x0
Reallocated segment.
Node in (1, 1), with 4 directions that belongs to segment with ID 3 and color 3
Node is at 0x7fb31dc05f50
Direction pointing to 0x7fb31dc05cd0
Direction 0 pointing to node in (1, 0) which belongs to segment 2 and has color 2
Direction pointing to 0x7fb31dc05bd0
Direction 3 pointing to node in (0, 1) which belongs to segment 0 and has color 1
Direction pointing to 0x7fb31dc05d20
Direction 1 pointing to node in (2, 1) which belongs to segment 2 and has color 2
Direction pointing to 0x0

Checking i, j (1, 2)
Created a new segment at 0x7fb31dc05f90 in: 
Segment 4 with size 0, 0 frontiers and color 1
    Added 1, 2 to the queue
    Checking 1, 2 from the queue
        Created a frontier node at:
Node in (1, 2), with 0 directions that belongs to segment with ID 4 and color 1
        Analyzing neighbours...
            Checking neighbour in 1, 1 against 3, 3
                Neighbour has color 3
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (1, 1), with 4 directions that belongs to segment with ID 3 and color 3
                Looking for the frontier with direction 2, which is opposite to our 0 in the other node!
                For k 0, other_direction is 0
                For k 1, other_direction is 3
                For k 2, other_direction is 1
                For k 3, other_direction is 2
                Found frontier in the other. Backlink created!
            Checking neighbour in 0, 2 against 3, 3
                Neighbour has color 3
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (0, 2), with 2 directions that belongs to segment with ID 1 and color 3
                Looking for the frontier with direction 1, which is opposite to our 3 in the other node!
                For k 0, other_direction is 0
                For k 1, other_direction is 1
                Found frontier in the other. Backlink created!
            Checking neighbour in 2, 2 against 3, 3
                Neighbour has color 2
                Neighbour is from a diff segment
                Adding to the parent node
                Searching for the pointed_node
                Found the pointed nod1e
                Pointed node:
Node in (2, 2), with 1 directions that belongs to segment with ID 2 and color 2
                Looking for the frontier with direction 3, which is opposite to our 1 in the other node!
                For k 0, other_direction is 3
                Found frontier in the other. Backlink created!
            Checking neighbour in 1, 3 against 3, 3
        After analysis: 
Node in (1, 2), with 3 directions that belongs to segment with ID 4 and color 1
        Node has 3 directions, so reallocating it
Finished expanding. Segment now: 
Segment 4 with size 1, 1 frontiers and color 1
Node in (1, 2), with 3 directions that belongs to segment with ID 4 and color 1
Node is at 0x7fb31dc05fb0
Direction pointing to 0x7fb31dc05f50
Direction 0 pointing to node in (1, 1) which belongs to segment 3 and has color 3
Direction pointing to 0x7fb31dc05ae0
Direction 3 pointing to node in (0, 2) which belongs to segment 1 and has color 3
Direction pointing to 0x7fb31dc05eb0
Direction 1 pointing to node in (2, 2) which belongs to segment 2 and has color 2
Reallocated segment.
Node in (1, 2), with 3 directions that belongs to segment with ID 4 and color 1
Node is at 0x7fb31dc05fb0
Direction pointing to 0x7fb31dc05f50
Direction 0 pointing to node in (1, 1) which belongs to segment 3 and has color 3
Direction pointing to 0x7fb31dc05ae0
Direction 3 pointing to node in (0, 2) which belongs to segment 1 and has color 3
Direction pointing to 0x7fb31dc05eb0
Direction 1 pointing to node in (2, 2) which belongs to segment 2 and has color 2

Checking i, j (2, 0)

Checking i, j (2, 1)

Checking i, j (2, 2)
Segment is at 0x7fb31dc05a90
Segment is at 0x7fb31dc05c60
Segment is at 0x7fb31dc05b30
Segment is at 0x7fb31dc05f30
Segment is at 0x7fb31dc05f90
Finished map. Map now: 
Map with 0 moves and 5 segments
=================
======== MAP ==
Map with 0 moves and 5 segments
    ===== SEGMENT ==
Segment 0 with size 2, 2 frontiers and color 1
        === FRONTIER NODE ==
Node in (0, 0), with 1 directions that belongs to segment with ID 0 and color 1
                = FRONTIER DIRECTION ==
Direction 1 pointing to node in (1, 0) which belongs to segment 2 and has color 2
        === FRONTIER NODE ==
Node in (0, 1), with 2 directions that belongs to segment with ID 0 and color 1
                = FRONTIER DIRECTION ==
Direction 1 pointing to node in (1, 1) which belongs to segment 3 and has color 3
                = FRONTIER DIRECTION ==
Direction 2 pointing to node in (0, 2) which belongs to segment 1 and has color 3
    ===== SEGMENT ==
Segment 1 with size 1, 1 frontiers and color 3
        === FRONTIER NODE ==
Node in (0, 2), with 2 directions that belongs to segment with ID 1 and color 3
                = FRONTIER DIRECTION ==
Direction 0 pointing to node in (0, 1) which belongs to segment 0 and has color 1
                = FRONTIER DIRECTION ==
Direction 1 pointing to node in (1, 2) which belongs to segment 4 and has color 1
    ===== SEGMENT ==
Segment 2 with size 4, 3 frontiers and color 2
        === FRONTIER NODE ==
Node in (1, 0), with 2 directions that belongs to segment with ID 2 and color 2
                = FRONTIER DIRECTION ==
Direction 3 pointing to node in (0, 0) which belongs to segment 0 and has color 1
                = FRONTIER DIRECTION ==
Direction 2 pointing to node in (1, 1) which belongs to segment 3 and has color 3
        === FRONTIER NODE ==
Node in (2, 1), with 1 directions that belongs to segment with ID 2 and color 2
                = FRONTIER DIRECTION ==
Direction 3 pointing to node in (1, 1) which belongs to segment 3 and has color 3
        === FRONTIER NODE ==
Node in (2, 2), with 1 directions that belongs to segment with ID 2 and color 2
                = FRONTIER DIRECTION ==
Direction 3 pointing to node in (1, 2) which belongs to segment 4 and has color 1
    ===== SEGMENT ==
Segment 3 with size 1, 1 frontiers and color 3
        === FRONTIER NODE ==
Node in (1, 1), with 4 directions that belongs to segment with ID 3 and color 3
                = FRONTIER DIRECTION ==
Direction 0 pointing to node in (1, 0) which belongs to segment 2 and has color 2
                = FRONTIER DIRECTION ==
Direction 3 pointing to node in (0, 1) which belongs to segment 0 and has color 1
                = FRONTIER DIRECTION ==
Direction 1 pointing to node in (2, 1) which belongs to segment 2 and has color 2
                = FRONTIER DIRECTION ==
Direction 2 pointing to node in (1, 2) which belongs to segment 4 and has color 1
    ===== SEGMENT ==
Segment 4 with size 1, 1 frontiers and color 1
        === FRONTIER NODE ==
Node in (1, 2), with 3 directions that belongs to segment with ID 4 and color 1
                = FRONTIER DIRECTION ==
Direction 0 pointing to node in (1, 1) which belongs to segment 3 and has color 3
                = FRONTIER DIRECTION ==
Direction 3 pointing to node in (0, 2) which belongs to segment 1 and has color 3
                = FRONTIER DIRECTION ==
Direction 1 pointing to node in (2, 2) which belongs to segment 2 and has color 2
== Attempting paint of map with 2. Initial segment has 2 frontiers
====== Checking node in 0
======== Checking direction in 0
============= Checking match! Segment 2 has color 2
============= Matched! Adding it...
====== Checking node in 1
======== Checking direction in 0
============= Checking match! Segment 3 has color 3
======== Checking direction in 1
============= Checking match! Segment 1 has color 3
== Found 1 matching segments
== Attempting merge of segment 0 with 2
